{"version":3,"sources":["components/FetchRandomUser.js","App.js","serviceWorker.js","index.js"],"names":["FetchRandomUser","state","loading","person","fetch","response","json","data","this","setState","results","class","src","picture","large","alt","name","first","title","last","registered","date","className","email","nat","Component","App","visible","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAEqBA,E,2MAEjBC,MAAQ,CACJC,SAAS,EACTC,OAAQ,M,2MAKI,wC,SACWC,MADX,yC,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAAEN,OAAQI,EAAKG,QAAQ,GAAIR,SAAS,I,qIAOlD,OAAIM,KAAKP,MAAMC,QACJ,2CAGNM,KAAKP,MAAME,OAKZ,6BACI,gCACI,6DAEJ,yBAAKQ,MAAM,WACP,yBAAKA,MAAM,SACX,yBAAKC,IAAKJ,KAAKP,MAAME,OAAOU,QAAQC,MAAOC,IAAKP,KAAKP,MAAME,OAAOa,KAAKC,SAEvE,yBAAKN,MAAM,WACP,uBAAGA,MAAM,UAAUH,KAAKP,MAAME,OAAOa,KAAKE,MAA1C,IAAkDV,KAAKP,MAAME,OAAOa,KAAKC,MAAzE,IAAiFT,KAAKP,MAAME,OAAOa,KAAKG,MACxG,yBAAKR,MAAM,QACP,0BAAMA,MAAM,QAAZ,aAA8BH,KAAKP,MAAME,OAAOiB,WAAWC,OAE/D,yBAAKV,MAAM,eACVH,KAAKP,MAAME,OAAOa,KAAKC,MADxB,IACgCT,KAAKP,MAAME,OAAOa,KAAKG,KADvD,2CAGJ,yBAAKG,UAAU,QAAO,uBAAGA,UAAU,cAAnC,IAAqDd,KAAKP,MAAME,OAAOoB,QAEvE,yBAAKZ,MAAM,iBACP,kDAAwBH,KAAKP,MAAME,OAAOqB,QAvB/C,wD,GAxB0BC,aCkB9BC,G,iNAdbzB,MAAQ,CACN0B,SAAS,G,wEAIT,OACA,yBAAKL,UAAU,OACf,kBAAC,EAAD,W,GATcG,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f9bc4efa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class FetchRandomUser extends Component {\r\n    // Default states for component is set here\r\n    state = {\r\n        loading: true,\r\n        person: null\r\n    }\r\n\r\n    // Asynchronus function that fecth data from an api and put in a person object.\r\n    async componentDidMount() {\r\n        const url = \"https://api.randomuser.me/?results=10\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState({ person: data.results[0], loading: false });\r\n    }\r\n    \r\n\r\n    // This is the rendering function of the component, this is what we output to the screen.\r\n    render() {\r\n        // The if-statement checks if there is data in the object holder or not, and displays data if there is.\r\n        if (this.state.loading) {\r\n            return <div>loading...</div>;\r\n        }\r\n\r\n        if (!this.state.person) {\r\n            return <div>didn't get a person</div>;\r\n        }\r\n        return (\r\n            // This is what we return to the screen, using Semantic UI CSS.\r\n            <div> \r\n                <header>\r\n                    <h1>Personel Legder of ACME Inc.</h1>\r\n                    </header>             \r\n                <div class=\"ui card\">\r\n                    <div class=\"image\">\r\n                    <img src={this.state.person.picture.large} alt={this.state.person.name.first} />\r\n                    </div>\r\n                    <div class=\"content\">\r\n                        <a class=\"header\">{this.state.person.name.title} {this.state.person.name.first} {this.state.person.name.last}</a>\r\n                        <div class=\"meta\">\r\n                            <span class=\"date\">Joined in {this.state.person.registered.date}</span>\r\n                        </div>\r\n                        <div class=\"description\">\r\n                        {this.state.person.name.first} {this.state.person.name.last} is an art director living in New York.\r\n                    </div>\r\n                    <div className=\"mail\"><i className=\"user mail\"></i> {this.state.person.email}</div>\r\n                    </div>\r\n                    <div class=\"extra content\">\r\n                        <a> Country of origin: {this.state.person.nat}\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport FetchRandomUser from \"./components/FetchRandomUser\";\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n    visible: true\n  };\n\n  render() {\n    return ( \n    <div className=\"App\">\n    <FetchRandomUser />\n\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}